//
//  MessagesViewController.swift
//  iMessage
//
//  Created by Денис Львович on 25.03.18.
//  Copyright © 2018 Денис Львович. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {

    private var realm = RealmHelper<MessageNews>()

    private var image: UIImage?
    private var name = ""
    private var text = ""

    override func viewDidLoad() {
        super.viewDidLoad()

        realm.fetchAll(withType: MessageNews.self)
        if let items = realm.objects {

            self.name = items[0].name
            self.text = items[0].text
            if let imageUrl = items[0].image {
                self.getPhoto(url: URL(string: imageUrl)!) { image in
                    self.image = image
                }
            }
        }

    }

    // MARK: - Conversation Handling
    
    @IBAction func sendButton(_ sender: Any) {
        let layout = MSMessageTemplateLayout()
        layout.caption = self.name

        if let image = self.image {
            layout.image = image
        }

        layout.subcaption = self.text
        let message = MSMessage()
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
    }

    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    func getPhoto(url: URL, completion: @escaping (_ image: UIImage?) -> Void) {

        DispatchQueue.global().async {
            do {
                let data = try Data(contentsOf: url)
                guard let image = UIImage(data: data) else {
                    assertionFailure()
                    return
                }
                DispatchQueue.main.async { completion(image) }

            } catch {
                DispatchQueue.main.async { completion(nil) }
            }
        }
    }

}
